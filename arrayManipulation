import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the arrayManipulation function below.
    //q = queries
    static long arrayManipulation(int n, int[][] q) {
        long[] b = new long[n+2];
        for(int i = 0; i < b.length; i++){
            b[i] = 0;
        }
        for(int i = 0; i < q.length; i++){
            add(b, q[i][0], q[i][1], q[i][2]);
        }
        for(int j = 1; j < b.length; j++){
            b[j] = b[j] + b[j-1];
        }
        for(i = 0; i < b.length; i++) {
            if(maxSum < b[i]){
                maxSum = b[i]; 
            }
        }
        return maxSum;
    }
    static void add(long[] b, int start, int end, int k){
        b[start] = b[start] + k;
        b[end + 1] = b[end + 1] - k;
    }

    static void print(long[] b) {
        for(long d: b){
            System.out.println(b);
        }
    }

    public static long maxSum = 0;
    public static int i = 0;

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        int[][] queries = new int[m][3];

        for (int i = 0; i < m; i++) {
            String[] queriesRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 3; j++) {
                int queriesItem = Integer.parseInt(queriesRowItems[j]);
                queries[i][j] = queriesItem;
            }
        }

        long result = arrayManipulation(n, queries);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
